package PaternLearn.Singleton;

// Если класс не синхронизировать с потоками, то можно создать несколько объектов и совершить ошибки.
// Синхронизация всего класса или getInstance(), при частом доступе, тормозит выполнение программы.
// Синхронизируем либо поле переменной, либо вызов if.

public class Singleton {
    // Статическая переменная для хранения единственного эксземпляра
    private static Singleton singleton;

    // Закрываем конструктор. Его запустить можно только из этого класса
    private Singleton() {
        System.out.println("I am singleton!!!");
    }

    // Создаем единственный экземпляр через открытый метод
    public static Singleton getInstance() {
        // Если объекта нет, поле пустое, то создаем объект.
        if (singleton == null) {
            singleton = new Singleton();
        }
    // Если объект уже создан, то возвращаем старый.
    return singleton;
    }

    // Здесь другие методы синглетоны.
}