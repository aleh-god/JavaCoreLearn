package GenericLearn;

// Обобщения работают только с объектами. Поэтому нельзя использовать в качестве параметра элементарные типы вроде int или char

// Использование обобщений автоматически гарантирует безопасность типов во всех операциях, где они задействованы. Это очень мощный механизм, широко используемый в Java.

class Generic<T> {
    /* В угловых скобках используется T - имя параметра типа. Это имя используется в качестве заполнителя, куда будет подставлено имя реального типа,
    переданного классу Gen при создании реальных типов. То есть параметр типа T применяется в классе всякий раз, когда требуется параметр типа.
    Угловые скобки указывают, что параметр может быть обобщён. Сам класс при этом называется обобщённым классом или параметризованным типом.
     */

    // Вместо T подставится реальный тип, который будет указан при создании объекта класса Gen. Объект ob будет объектом типа, переданного в параметре типа T.
    T ob; // объявление объекта типа T

    // Конструктор
    Generic(T o) { // Это значит, что реальный тип параметра o определяется типом, переданным параметром типа T при создании объекта класса Gen.
        ob = o;
    }
    // Вернуть ob Setter
    T getob() { // Параметр типа T также может быть использован для указания типа возвращаемого значения метода
        return ob;
    }

    // Показать тип T Getter
    void showType() {
        System.out.println("Тип T: " + ob.getClass().getName());

    }
    // Никто не запрещает создавать и методы с параметрами и возвращаемыми значениями в виде обобщений.
    public static <T> T getMiddle(T... a) {
        return a[a.length / 2];
    }
}